Twig для верстальщиков
======================
Этот документ описывает синтаксис и семантику шаблонов. Будет наиболее полезен
тем, кто создает Twig шаблоны

Краткий обзор
-------------

Шаблон — это просто текстовой файл. Вы можете генерировать любой текстовый
формат (HTML, XML, CSV, LaTeX, и тп.). Шаблон может иметь любое расширение,
обычно это ``.html`` или ``.xml``.

Шаблон содержит **переменные** или **выражения**, которые заменяются на их
значения, во время генерации шаблона и **теги** которые контролируют логику
шаблона.

Рассмотрим небольшой пример шаблона, в котором показаны некоторые основы
создания шаблонов:

.. code-block:: html+twig

    <!DOCTYPE html>
    <html>
        <head>
            <title>Мой сайт</title>
        </head>
        <body>
            <ul id="navigation">
            {% for item in navigation %}
                <li><a href="{{ item.href }}">{{ item.caption }}</a></li>
            {% endfor %}
            </ul>

            <h1>Моя статья</h1>
            {{ a_variable }}
        </body>
    </html>

Есть два вида разделителей ``{% ... %}`` и ``{{ ... }}``. Первый используется
для выполнения выражений, например, циклов, второй — для вывода результата
выражения в шаблоне.

Интеграция с IDE
----------------

Многие IDE поддерживают подсветку синтаксиса и автодополнение для Twig:

* *Textmate* via the `Twig bundle`_
* *Vim* via the `Jinja syntax plugin`_ or the `vim-twig plugin`_
* *Netbeans* via the `Twig syntax plugin`_ (until 7.1, native as of 7.2)
* *PhpStorm* (native as of 2.1)
* *Eclipse* via the `Twig plugin`_
* *Sublime Text* via the `Twig bundle`_
* *GtkSourceView* via the `Twig language definition`_ (used by gedit and other projects)
* *Coda* and *SubEthaEdit* via the `Twig syntax mode`_
* *Coda 2* via the `other Twig syntax mode`_
* *Komodo* and *Komodo Edit* via the Twig highlight/syntax check mode
* *Notepad++* via the `Notepad++ Twig Highlighter`_
* *Emacs* via `web-mode.el`_
* *Atom* via the `PHP-twig for atom`_
* *Visual Studio Code* via the `Twig pack`_

Also, `TwigFiddle`_ is an online service that allows you to execute Twig templates
from a browser; it supports all versions of Twig.

Переменные
----------

Приложение передает переменные в шаблон, где вы можете их использовать.
У переменных могут быть атрибуты, значения которых вы можете получить.
Как выглядит переменная во многом зависит от того, как приложение предоставит ее.

Вы можете использовать точку (``.``) для доступа к атрибутам переменной
(методы, свойства объекта, или массивы PHP),
или так называемый "индекс" синтаксис (``[]``):

.. code-block:: twig

    {{ foo.bar }}
    {{ foo['bar'] }}

Если атрибуты содержат специальные символы (например, ``-`` это воспримется,
как оператор минус), в этом случае используйте функцию ``attribute``:

.. code-block:: twig

    {# Подобное не будет работать foo.data-foo #}
    {{ attribute(foo, 'data-foo') }}

.. note::

    Важно понимать, что фигурные скобки *не являются* часть переменной,
    они используются для ее отображения. Если необходим доступ к переменной в
    тэге — фигурные скобки не нужны.

Если переменная, или атрибут не найден, то в шаблоне это заменится на ``null``
значение. Однако если опция ``strict_variables`` установлена как ``false``,
Twig выдаст сообщение об ошибке (см. :ref:`environment options<environment_options>`).

.. sidebar:: Реализация

    Рассмотрим что будет, когда Twig ищет ``foo.bar`` на уровне PHP:

    * проверяет, что ``foo`` — массив, и bar — ключ в массиве;
    * если нет, и ``foo`` — объект и ``bar`` соответствующие свойство;
    * если нет, и ``foo`` — объект и ``bar`` соответствующий метод
      (даже если ``bar`` конструктор — use ``__construct()``);
    * если нет, и ``foo`` — объект, проверяет есть ли метод ``getBar``;
    * если нет, и ``foo`` — объект, проверяет есть ли метод ``isBar``;
    * если нет, вернется ``null``.

    ``foo['bar']`` это массив:

    * проверяет, что ``foo`` — массив и bar — существующий в нем ключ;
    * если нет, вернется ``null``.

.. note::

    Если вы хотите получить динамический атрибут переменной, используйте
    :doc:`attribute<functions/attribute>` функцию вместо этого.

Глобальные переменные
~~~~~~~~~~~~~~~~~~~~~

Следующие переменные всегда доступны в шаблонах:

* ``_self``: ссылается на текущий шаблон;
* ``_context``: ссылается на текущее окружение;
* ``_charset``: ссылается на текущую кодировку.

Переменные
~~~~~~~~~~~~~~~~~~~~

Вы можете устанавливать значения переменных в блоках кода для этого
используйте тег :doc:`set<tags/set>`:

.. code-block:: twig

    {% set foo = 'foo' %}
    {% set foo = [1, 2] %}
    {% set foo = {'foo': 'bar'} %}

Фильтры
-------

Переменные могут быть изменены с помощью фильтров. Фильтры отделяются от переменных
прямой чертой (``|``) и могут содержать параметры в круглых скобках. Фильтры могут
применяться по цепочке. Тогда результат одного фильтра передается к следующему.

Следующий пример удаляет все HTML-тэги из ``name`` и преобразует в верхний
регистр первый символ каждого слова:

.. code-block:: twig

    {{ name|striptags|title }}

У фильтров, которые принимают аргументы, есть круглые скобки вокруг аргументов.
В этом примере, добавится после list запятая :

.. code-block:: twig

    {{ list|join(', ') }}

Чтобы применить фильтр к блоку кода — оберните его тэгом :doc:`filter<tags/filter>`:

.. code-block:: twig

    {% filter upper %}
        Этот текст будет в верхнем регистре
    {% endfilter %}

Перейдите на страницу :doc:`filters<filters/index>`, чтобы узнать больше о
встроенных фильтрах.

Функции
---------

Функции можно вызвать для генерации контента. После названия функции идут
фигурные скобки (``()``) в скобках могут быть аргументы.

Например, функция ``range`` возвращает список, содержащий
арифметическую прогрессию целых чисел:

.. code-block:: twig

    {% for i in range(0, 3) %}
        {{ i }},
    {% endfor %}

Перейдите на страницу :doc:`functions<functions/index>`, чтобы узнать больше о
встроенных функциях.

.. _named-arguments:

Именованные аргументов
----------------------

.. code-block:: twig

    {% for i in range(low=1, high=10, step=2) %}
        {{ i }},
    {% endfor %}

Использование именованных аргументов делает шаблоны более понятными:

.. code-block:: twig

    {{ data|convert_encoding('UTF-8', 'iso-2022-jp') }}

    {# В сравнении с  #}

    {{ data|convert_encoding(from='iso-2022-jp', to='UTF-8') }}

Также позволяют Вам пропускать некоторые аргументы,
для которых Вы не хотите менять значение по умолчанию:

.. code-block:: twig

    {# Первый аргумент — формат даты, который задан в приложении глобально #}
    {{ "now"|date(null, "Europe/Paris") }}

    {# Или можно пропустить ``format``, но указать ``timezone`` #}
    {{ "now"|date(timezone="Europe/Paris") }}

Вы также можете использовать за один вызов оба варианта вывода аргументов,
однако это не рекомендуется, потому что это может привести к путанице:

.. code-block:: twig

    {# Оба варианта - рабочие #}
    {{ "now"|date('d/m/Y H:i', timezone="Europe/Paris") }}
    {{ "now"|date(timezone="Europe/Paris", 'd/m/Y H:i') }}

.. tip::

    У каждой функции и фильтра есть страница документации,
    где перечислено какие названия аргументов поддерживаются.

Управляющие конструкции
-----------------------

К управляющим конструкциям относится все условные операторы
(такие как  ``if``/``elseif``/``else``), ``for``- циклы, а также блоки.
Управляющие конструкции находятся внутри``{% ... %}`` блоков.

Например, чтобы отобразить список пользователей ``users``,
используется тег :doc:`for<tags/for>`:

.. code-block:: twig

    <h1>Пользователи</h1>
    <ul>
        {% for user in users %}
            <li>{{ user.username|e }}</li>
        {% endfor %}
    </ul>

Тег :doc:`if<tags/if>` может быть использован для проверки выражения:

.. code-block:: twig

    {% if users|length > 0 %}
        <ul>
            {% for user in users %}
                <li>{{ user.username|e }}</li>
            {% endfor %}
        </ul>
    {% endif %}

Перейдите на страницу :doc:`tags<tags/index>`, чтобы узнать больше о встроенных тегов.

Комментарии
---------------

Чтобы закомментировать часть шаблона, используйте следующий синтаксис ``{# ... #}``.
Это бывает полезно при отладке или добавлении полезной информации для других
дизайнеров или себя:

.. code-block:: twig

    {# примечание: это закомментированно, пока не используется
        {% for user in users %}
            ...
        {% endfor %}
    #}

Подключение шаблонов
--------------------

Тэг :doc:`include<tags/include>` используется для подключения одного шаблона в другой.

.. code-block:: twig

    {% include 'sidebar.html' %}

По умолчанию содержимое подключаемых шаблонов выводится в месте их вызова

Подключаемые шаблоны имеют доступ ко всем переменным шаблона к которому
они подключаются.

.. code-block:: twig

    {% for box in boxes %}
        {% include "render_box.html" %}
    {% endfor %}

Подключенный шаблон ``render_box.html`` имеет доступ к переменной ``box``.

Название файла с шаблоном определяется в загрузчике шаблона. Например,
``Twig_Loader_Filesystem`` позволяет получить доступ к другим шаблонам по
названию файла. Вы можете получить доступ к шаблонам в подкаталогах,
используя слэш ``/``:

.. code-block:: twig

    {% include "sections/articles/sidebar.html" %}

Такое поведение зависит от применения вложения Twig.

Наследование шаблонов
---------------------

Самая мощная часть Twig — это наследование шаблонов. Наследование шаблонов
позволяет вам создать основной "скелет" шаблона, который содержит все элементы
вашего сайта и определить тэги **blocks**, которые будут перезаписаны в дочерних
шаблонах.

Звучит сложно, на самом деле все просто. Проще всего разобраться с наследованием
на примере.

Давайте определим базовый шаблон, ``base.html``, для простой страницы
с двумя колонками:

Давайте создадим основной шаблон, ``base.html``, который определит простой
"скелет" HTML-документа, который можно использовать для простой страницы с
двумя колонками:

.. code-block:: html+twig

    <!DOCTYPE html>
    <html>
        <head>
            {% block head %}
                <link rel="stylesheet" href="style.css" />
                <title>{% block title %}{% endblock %} - Мой сайт</title>
            {% endblock %}
        </head>
        <body>
            <div id="content">{% block content %}{% endblock %}</div>
            <div id="footer">
                {% block footer %}
                    &copy; Copyright 2013 <a href="http://example.com/">Вы</a>.
                {% endblock %}
            </div>
        </body>
    </html>

В этом примере тегом the :doc:`block<tags/block>` определяется 4 блока,
которые мы и заменим. Все теги ``block`` сообщат шаблонизатору,
что в последствии их можно будет переопределить

В этом примере, тэг :doc:`block<tags/block>` определяет четыре блока, которые
будут заполнены в дочернем шаблоне. Все теги ``block`` говорят шаблонизатору,
что они могут быть переопределены в дочернем шаблоне.

Дочерний шаблон может выглядеть следующим образом:

.. code-block:: html+twig

    {% extends "base.html" %}

    {% block title %}Главная{% endblock %}
    {% block head %}
        {{ parent() }}
        <style type="text/css">
            .important { color: #336699; }
        </style>
    {% endblock %}
    {% block content %}
        <h1>Главная</h1>
        <p class="important">
            Приветсвую на своем потрясном сайте!
        </p>
    {% endblock %}

Тэг :doc:`extends<tags/extends>` ключевой здесь. Он сообщает шаблонизатору,
что этот шаблон "расширяет" другой шаблон. Когда шаблонизатор обрабатывает шаблон,
он первым делом смотрит на родительский шаблон. *Тег ``extends`` должен
быть первым в шаблоне*.

Обратите внимание, что так как в дочернем шаблоне не определен блок ``footer``,
то он берется из родительского.

Используя функцию :doc:`parent<functions/parent>`, можно отобразить содержание
родительского блока. Она возвращает первоначальное содержание родительского блока:

.. code-block:: html+twig

    {% block sidebar %}
        <h3>Оглавление</h3>
        {{ parent() }}
    {% endblock %}

.. tip::

    Страница документации :doc:`extends<tags/extends>` описывает более
    продвинутые функции, такие как вложенности блоков, область применения,
    динамическое и условное наследование.

.. note::

    Twig также поддерживает множественное наследование с использованием
    тега :doc:`use<tags/use>` tag. Эта дополнительная функция вряд ли
    понадобится в шаблонах.

Экранирование HTML
------------------

При генерации HTML в шаблоне всегда есть риск того, что переменные будут
содержать специальные символы, которые влияют на полученный HTML. Есть два
варианта решения: вручную отмечать переменные, которые нужно экранировать или
автоматически экранировать все по умолчанию.

По умолчанию в Twig автоматическое экранирование переменных включено.

.. note::

    Автоматическое экранирование работает только, если включено *escaper*
    расширение (значение по умолчанию).

Работа с ручным экранированием
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Если ручное экранирование включено, ответственность за безопасность переменных
лежит на *вас*. Что экранировать? Любую переменную, которой вы не доверяете.

Экранирование осуществляется с помощью фильтра :doc:`escape<filters/escape>` или ``e``:

.. code-block:: twig

    {{ user.username|e }}

По умолчанию фильтр ``escape`` использует ``html`` режим экранирования,
но в зависимости от ситуации вы можете использовать любые другие доступные
способы экранирования:

.. code-block:: twig

    {{ user.username|e('js') }}
    {{ user.username|e('css') }}
    {{ user.username|e('url') }}
    {{ user.username|e('html_attr') }}

Работа с автоматическим экранированием
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Вне зависимости от того включено экранирование или нет, вы можете добавить
экранирование для блока кода с помощью тега :doc:`autoescape<tags/autoescape>`:

.. code-block:: twig

    {% autoescape %}
        В этом блоке все будет автоматически экранировано (с помощью HTML режима)
    {% endautoescape %}

По умолчанию автоматическое экранирование использует режим ``html``.
Если есть переменые для экранирования в других режимах, необходимо добавить этот
режим:

.. code-block:: twig

    {% autoescape 'js' %}
        В этом блоке все будет автоматически экранировано (с помощью JavaScript режима)
    {% endautoescape %}

Экранирование
------------------

Иногда необходимо Twig вывести данные без обработки. Например,
вы хотите вывести (``{{``) в шаблоне:

Самый простой способ для вывода (``{{``) это использовать следующее выражение:

.. code-block:: twig

    {{ '{{' }}

Для больших блоков нужно использовать тег :doc:`verbatim<tags/verbatim>`.

Макросы
-------

Макросы сопоставимы с функциями в обычных языках программирования.
Они полезны, когда нужно повторить многократно HTML-код, но не копировать его.

Макрос определяется тегом :doc:`macro<tags/macro>`.
Небольшой пример макроса для отображение элементов формы:

.. code-block:: twig

    {% macro input(name, value, type, size) %}
        <input type="{{ type|default('text') }}" name="{{ name }}" value="{{ value|e }}" size="{{ size|default(20) }}" />
    {% endmacro %}

Макросы могут быть определенны в любом шаблоне и должны быть импортированы
с помощью тэга :doc:`import<tags/import>` перед использованием:

.. code-block:: twig

    {% import "forms.html" as forms %}

    <p>{{ forms.input('username') }}</p>

Кроме того, вы можете импортировать отдельные имена макросов из шаблона
в текущем пространстве имен с помощью тега :doc:`from<tags/from>`
и опционально задать им псевдоним:

.. code-block:: twig

    {% from 'forms.html' import input as input_field %}

    <dl>
        <dt>Логин</dt>
        <dd>{{ input_field('username') }}</dd>
        <dt>Пароль</dt>
        <dd>{{ input_field('password', '', 'password') }}</dd>
    </dl>

Также могут быть определенны по умолчанию значения для аргументов при объявлении макроса:

.. code-block:: twig

    {% macro input(name, value = "", type = "text", size = 20) %}
        <input type="{{ type }}" name="{{ name }}" value="{{ value|e }}" size="{{ size }}" />
    {% endmacro %}

Операторы
---------

Twig позволяет использовать операторы везде. Они работают подобно обычным
операторам PHP, если вы не знаете PHP то у вас не будет с ними сложностей.

.. note::

    Приоритет операторов, сначала идут операторы с наименьшим
    приоритетом: ``b-and``, ``b-xor``, ``b-or``, ``or``, ``and``,
    ``==``, ``!=``, ``<``, ``>``, ``>=``, ``<=``, ``in``, ``..``, ``+``,
    ``-``, ``~``, ``*``, ``/``, ``//``, ``%``, ``is``, and ``**``.

Литералы
~~~~~~~~

Самая простая форма выражений - литералы. Литералы соответствуют типам данных
PHP: строки, числа и массивы. Существуют следующие литералы:

* ``"Привет мир"``: Все заключенное в одинарные или двойные кавычки
  является строками. Это полезно, когда нужно использовать строки в шаблоне
  (например, в качестве аргументов для вызова функций, фильтров или просто,
  чтобы расширить или подключить шаблон). Строка может содержать разделитель,
  который нужно экранировать обратным слешем (``\``) --
  как в примере ``'It\'s good'``.

* ``42`` / ``42.23``: Целые числа и числа с плавающей точкой записываются
  так как есть. Если есть точка — это float, иначе — integer.

* ``["foo", "bar"]``: Массивы определяются как набор данных разделенных
  запятыми (``,``) и заключенных в квадратные скобки (``[]``).

* ``{"foo": "bar"}``: Хеши определяются списком ключей и значений
  разделенными запятой (``,``) и заключены в фигурные скобки (``{}``).

  .. code-block:: twig

    {# ключи как строка #}
    { 'foo': 'foo', 'bar': 'bar' }

    {# ключи как названия (эквивалентно предыдущему варианту) -- доступно с Twig 1.5 #}
    { foo: 'foo', bar: 'bar' }

    {# ключи как число #}
    { 2: 'foo', 4: 'bar' }

    {# ключи как выражения (выражения должны быть включены в скобки) -- доступно с Twig 1.5 #}
    { (1 + 1): 'foo', (a ~ 'b'): 'bar' }

* ``true`` / ``false``: ``true`` — истина, ``false`` — ложь.

* ``null``: ``null`` специальное значение. Это значение возвращается,
  когда переменной не существует. ``none`` является псевдонимом для ``null``.

Массивы и хеши могут быть вложены друг в друга:

.. code-block:: twig

    {% set foo = [1, {"foo": "bar"}] %}

.. tip::

    Использование двойных или одинарных кавычек не влияет на производительность,
    но интерполяция строк (подстановка переменных) поддерживается только
    в двойных кавычках.

Математические операторы
~~~~~~~~~~~~~~~~~~~~~~~~

Twig позволяет производить математические операции над данными.
Поддерживаются следующие операторы:

* ``+``:Складывает два объекта вместе (операнды приводятся к числами).
  ``{{ 1 + 1 }}`` выведет ``2``.

* ``-``:Вычитает из первого аргумента второй. ``{{ 3 - 2 }}`` выведет ``1``.

* ``/``:Деление чисел. Возвращает число с плавающей точкой. ``{{ 1 / 2 }}`` равнозначно ``{{ 0.5 }}``.

* ``%``:Вычисляет целый остаток от деления. ``{{ 11 % 7 }}`` выведет ``4``.

* ``//``:Делит два числа и возвращает результат целое число. ``{{20 // 7 }}`` выведет ``2``.

* ``*``:Умножение. ``{{ 2 * 2 }}`` вернет ``4``.

* ``**``:Возводит левый аргумент в степень правого аргумента ``{{ 2 ** 3 }}`` вернет ``8``.

Логические операторы
~~~~~~~~~~~~~~~~~~~~

Вы можете сочетать выражения используя следующие операторы:

* ``and``: Возвращает ``true``, если левое и правое значение являются ``true``.

* ``or``: Возвращает ``true``, если левое или правое значение являются ``true``.

* ``not``: Противоположное значение.

* ``(expr)``: Группа выражений.

.. note::

    Twig также поддерживает битовые операторы: (``b-and``, ``b-xor``, and ``b-or``).

Операторы сравнения
~~~~~~~~~~~~~~~~~~~

Следующие операторы сравнения поддерживаются в любом выражении:
``==``, ``!=``, ``<``, ``>``, ``>=``, and ``<=``.

Оператор содержания
~~~~~~~~~~~~~~~~~~~~

Оператор ``in`` осуществляет проверку на совпадение.

Возвращает ``true``, если левое значение содержится в правом:

.. code-block:: twig

    {# вернет true #}

    {{ 1 in [1, 2, 3] }}

    {{ 'cd' in 'abcde' }}

.. tip::

    Вы можете использовать проверку на совпадение для строк, массивов
    или объектов реализующих интерфейс ``Traversable``.

Для отрицания используйте оператор ``not in``:

.. code-block:: twig

    {% if 1 not in [1, 2, 3] %}

    {# эквивалентно #}
    {% if not (1 in [1, 2, 3]) %}

Оператор проверки
~~~~~~~~~~~~~~~~~

Оператор ``is`` проверяет данные на соответствие

.. code-block:: twig

    {# проверит является ли переменная нечетной #}

    {{ name is odd }}

Так же можно использовать аргументы:

.. code-block:: twig

    {% if loop.index is divisibleby(3) %}

Для отрицания используйте оператор, используйте оператор ``is not``:

.. code-block:: twig

    {% if loop.index is not divisibleby(3) %}

    {# эквивалентно #}
    {% if not (loop.index is divisibleby(3)) %}

Результаты работы можно посмотреть в тестах :doc:`tests<tests/index>`.

Другие операторы
~~~~~~~~~~~~~~~~

Следующие операторы очень полезны, но не попадают ни в одну из других категорий:

* ``..``: Создает последовательность от левого до правого значения,
  (это просто дополнение синтаксиса для функции :doc:`range<functions/range>`)

* ``|``: Применяет фильтр.

* ``~``: Преобразует все значения в строки и соединяет их.
  ``{{ "Привет " ~ name ~ "!" }}`` вернет
  (предположим, что ``name`` это ``'Иван'``) ``Привет Иван!``.

* ``.``, ``[]``: Получает атрибут объекта.

* ``?:``: Тернарный оператор:

  .. code-block:: twig

      {{ foo ? 'Да' : 'Нет' }}

      {# доступно с Twig 1.12.0 #}
      {{ foo ?: 'Нет' }} == {{ foo ? foo : 'Нет' }}
      {{ foo ? 'Да' }} == {{ foo ? 'Да' : '' }}

Подстановка переменных
~~~~~~~~~~~~~~~~~~~~~~

Подстановка переменных (``#{expression}``) доступна для любого выражения
находящегося в *строке с двойными скобками*:

.. code-block:: twig

    {{ "Привет #{name}! Как дела?" }}
    {{ "Дважды два =  #{2*2}" }}

Управление пробелами
---------------------

Первая строка после тэга удаляется автоматически (как в PHP.)
Пробелы не изменяются шаблонизатором, так же как и другие подобные
символы (табуляция, символ новой строки и др.) и возвращается без изменений.

Используйте тег ``spaceless`` для удаления пробелов *между HTML тегами*:

.. code-block:: twig

    {% spaceless %}
        <div>
            <strong>foo</strong>
        </div>
    {% endspaceless %}

    {# на выходе будет <div><strong>foo</strong></div> #}

Также можно удалять пробелы для блоков кода:

.. code-block:: html+twig

    {% set value = 'no spaces' %}
    {#- нет начальных и конечных пробелов -#}
    {%- if true -%}
        {{- value -}}
    {%- endif -%}

    {# выведет 'no spaces' #}

Можно удалять пробелы с одной или другой стороны:

.. code-block:: twig

    {% set value = 'no spaces' %}
    <li>    {{- value }}    </li>

    {# выведет '<li>no spaces    </li>' #}

Расширения
----------

Twig может быть легко расширен. Если вы хотите создать свое собственное расширение, читайте раздел
:ref:`Создание Расширения <creating_extensions>`.

.. _`Twig bundle`:                https://github.com/Anomareh/PHP-Twig.tmbundle
.. _`Jinja syntax plugin`:        http://jinja.pocoo.org/docs/integration/#vim
.. _`vim-twig plugin`:            https://github.com/lumiliet/vim-twig
.. _`Twig syntax plugin`:         http://plugins.netbeans.org/plugin/37069/php-twig
.. _`Twig plugin`:                https://github.com/pulse00/Twig-Eclipse-Plugin
.. _`Twig language definition`:   https://github.com/gabrielcorpse/gedit-twig-template-language
.. _`Twig syntax mode`:           https://github.com/bobthecow/Twig-HTML.mode
.. _`other Twig syntax mode`:     https://github.com/muxx/Twig-HTML.mode
.. _`Notepad++ Twig Highlighter`: https://github.com/Banane9/notepadplusplus-twig
.. _`web-mode.el`:                http://web-mode.org/
.. _`regular expressions`:        https://www.php.net/manual/en/pcre.pattern.php
.. _`PHP-twig for atom`:          https://github.com/reesef/php-twig
.. _`TwigFiddle`:                 https://twigfiddle.com/
.. _`Twig pack`:                  https://marketplace.visualstudio.com/items?itemName=bajdzis.vscode-twig-pack
